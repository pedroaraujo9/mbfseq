% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clustseq_find_init.R
\name{clustseq_find_init}
\alias{clustseq_find_init}
\title{Find Robust Initial Values for Cluster Sequence Model}
\usage{
clustseq_find_init(
  model_data,
  n_start = 30,
  max_iter_start = 30,
  n_cores_init = 1,
  w = NULL,
  lambda = NULL,
  n_basis = 10,
  fixed_sd = 10,
  epsilon = 1,
  intercept = FALSE,
  init_list = NULL,
  verbose = FALSE,
  seed = NULL
)
}
\arguments{
\item{model_data}{A model_data object from create_model_data, with all basis, cluster, and covariate fields needed for model fitting.}

\item{n_start}{Integer. Number of short MCMC/EM chains to run for initialization (default: 30).}

\item{max_iter_start}{Integer. Number of iterations in each short initialization chain (default: 30).}

\item{n_cores_init}{Integer. Number of CPU cores for parallelization across initial chains (default: 1).}

\item{w}{(Optional) Initial secondary cluster assignment vector for all initialization chains.}

\item{lambda}{(Optional) Penalty or regularization hyperparameter to use during initialization.}

\item{n_basis}{Integer. Number of basis functions for modeling time (default: 10).}

\item{fixed_sd}{Numeric. Fixed standard deviation for proposals/priors (default: 10).}

\item{epsilon}{Numeric. Small value for priors/jitter (default: 1).}

\item{intercept}{Logical. Whether to fit an intercept term in the model (default: FALSE).}

\item{init_list}{(Optional) List of specific initial parameter values for the chains.}

\item{verbose}{Logical. If TRUE, prints progress for each short chain (default: FALSE).}

\item{seed}{(Optional) Integer random seed for reproducible initialization.}
}
\value{
A list with:
\describe{
\item{best_fit}{The full output of clustseq_single_run from the initial chain with the highest mean log posterior.}
\item{init_list}{List of final parameter values (the last sample from best_fit$sample_list) for warm starting further fitting.}
\item{logpost_mean}{Numeric vector with the mean log posterior across all initialization chains.}
}
}
\description{
Run multiple short chains for the cluster sequence model in parallel (or sequentially) to search for robust initial parameter values and cluster assignments. Each short chain fits using clustseq_single_run; the run with the highest mean log posterior is selected, and its last sample is used for initialization.
}
\details{
Uses the future and future.apply packages for multicore parallelization across initial chains. Especially suited for mixture/cluster models where initialization is sensitive and local optima are a risk. The function always restores the R session's future plan to sequential on exit. This function is intended for internal or parallel use and is not exported to end users.
}
\examples{
\dontrun{
  # Example: Robust initialization for cluster sequence modeling
  set.seed(2023)
  time <- rep(1:3, 10)
  id <- rep(1:10, each = 3)
  z <- rep(1:2, each=15)
  w <- rep(1:2, length.out=30)
  model_data <- create_model_data(time = time, id = id, z = z, w = w)

  # Parallel, short runs for initialization
  init <- clustseq_find_init(
    model_data = model_data,
    n_start = 5,
    max_iter_start = 5,
    n_cores_init = 2
  )
  str(init)
}
}
